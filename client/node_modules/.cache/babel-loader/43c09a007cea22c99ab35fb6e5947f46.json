{"ast":null,"code":"import _toConsumableArray from\"/Users/brianeliasmontellano/CODE/memories_MERN_app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{FETCH_ALL,CREATE,UPDATE,LIKE,DELETE,DELETE_ALL}from'../constants/actionTypes';export default(function(){var posts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FETCH_ALL://return action posts\nreturn action.payload;case CREATE:return[].concat(_toConsumableArray(posts),[action.payload]);case UPDATE:case LIKE:return posts.map(function(post){return post._id===action.payload._id?action.payload:post;});case DELETE:return posts.filter(function(post){return post._id!==action.payload;});case DELETE_ALL:return[];default:return posts;}});","map":{"version":3,"sources":["/Users/brianeliasmontellano/CODE/memories_MERN_app/client/src/reducers/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","LIKE","DELETE","DELETE_ALL","posts","action","type","payload","map","post","_id","filter"],"mappings":"oJAAA,OAAQA,SAAR,CAAmBC,MAAnB,CAA2BC,MAA3B,CAAmCC,IAAnC,CAAyCC,MAAzC,CAAiDC,UAAjD,KAAkE,0BAAlE,CAEA,eAAe,UAAwB,IAAvBC,CAAAA,KAAuB,2DAAf,EAAe,IAAXC,CAAAA,MAAW,2CACnC,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKR,CAAAA,SAAL,CACI;AACA,MAAOO,CAAAA,MAAM,CAACE,OAAd,CACJ,IAAKR,CAAAA,MAAL,CACI,mCAAWK,KAAX,GAAkBC,MAAM,CAACE,OAAzB,GACJ,IAAKP,CAAAA,MAAL,CACA,IAAKC,CAAAA,IAAL,CACI,MAAOG,CAAAA,KAAK,CAACI,GAAN,CAAU,SAACC,IAAD,QAAWA,CAAAA,IAAI,CAACC,GAAL,GAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,CAAkCL,MAAM,CAACE,OAAzC,CAAmDE,IAA9D,EAAV,CAAP,CACJ,IAAKP,CAAAA,MAAL,CACI,MAAOE,CAAAA,KAAK,CAACO,MAAN,CAAa,SAACF,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaL,MAAM,CAACE,OAA9B,EAAb,CAAP,CACJ,IAAKJ,CAAAA,UAAL,CACI,MAAO,EAAP,CACJ,QACI,MAAOC,CAAAA,KAAP,CAdR,CAgBH,CAjBD","sourcesContent":["import {FETCH_ALL, CREATE, UPDATE, LIKE, DELETE, DELETE_ALL} from '../constants/actionTypes';\n\nexport default (posts = [], action) => {\n    switch (action.type) {\n        case FETCH_ALL:\n            //return action posts\n            return action.payload;\n        case CREATE:\n            return [...posts, action.payload];\n        case UPDATE:\n        case LIKE:\n            return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n        case DELETE:\n            return posts.filter((post) => post._id !== action.payload)\n        case DELETE_ALL:\n            return [];\n        default:\n            return posts;\n    }   \n}"]},"metadata":{},"sourceType":"module"}