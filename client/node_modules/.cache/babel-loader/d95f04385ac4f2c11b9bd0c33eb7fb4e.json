{"ast":null,"code":"var _jsxFileName = \"/Users/brianeliasmontellano/CODE/memories_MERN_app/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport useStyles from './styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport FileBase from 'react-file-base64';\nimport { useDispatch } from 'react-redux';\nimport { createPost, deleteAllPosts } from '../../actions/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const [postData, setPostData] = useState({\n    creator: '',\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log('this is the post data -->', postData); //simple validator of data entry\n\n    /*\n    if(postData.creator === '' || postData.title === '' || postData.message === '') {\n      return alert('Creator, title and message fields are required');\n    }\n    */\n\n    const {\n      name,\n      value\n    } = e.target;\n    let errors = this.state.errors;\n\n    switch (name) {\n      case 'creator':\n        errors.creator = value.length < 0 ? 'Creator is required' : '';\n        break;\n\n      case 'title':\n        errors.title = value.length < 0 ? 'Title is required' : '';\n        break;\n\n      case 'message':\n        errors.message = value.length < 0 ? 'Message is required' : '';\n        break;\n\n      /*\n      case 'email': \n      errors.email = \n        validEmailRegex.test(value)\n          ? ''\n          : 'Email is not valid!';\n      break;\n      case 'password': \n      errors.password = \n        value.length < 8\n          ? 'Password must be at least 8 characters long!'\n          : '';\n      break;\n      */\n\n      default:\n        break;\n    }\n\n    this.setState({\n      errors,\n      [name]: value\n    });\n    dispatch(createPost(postData));\n  };\n\n  const clear = () => {\n    setPostData({\n      creator: '',\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  const destroyMemories = () => {\n    var result = window.confirm(\"Are you sure you want to delete all memories?\");\n\n    if (result) {\n      console.log('destroyed all memories');\n      dispatch(deleteAllPosts());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Creating Nostalgia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        name: \"creator\",\n        variant: \"outlined\",\n        label: \"Creator\",\n        fullWidth: true,\n        value: postData.creator,\n        onChange: e => setPostData({ ...postData,\n          creator: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.clearButton,\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"default\",\n        size: \"large\",\n        onClick: destroyMemories,\n        fullWidth: true,\n        children: \"DESTROY MEMORIES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Form, \"WKVJnUEXN2X4U25okRITre+cBJw=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/brianeliasmontellano/CODE/memories_MERN_app/client/src/components/Form/Form.js"],"names":["React","useState","useStyles","TextField","Button","Typography","Paper","FileBase","useDispatch","createPost","deleteAllPosts","Form","postData","setPostData","creator","title","message","tags","selectedFile","classes","dispatch","handleSubmit","e","preventDefault","console","log","name","value","target","errors","state","length","setState","clear","destroyMemories","result","window","confirm","paper","root","form","split","fileInput","base64","buttonSubmit","clearButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport useStyles from './styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport FileBase from 'react-file-base64';\nimport { useDispatch } from 'react-redux';\nimport { createPost, deleteAllPosts } from '../../actions/posts'\n\nconst Form = () => {\n   const [postData, setPostData] = useState({\n     creator: '',\n     title:'',\n     message:'',\n     tags:'',\n     selectedFile: ''\n   });\n   const classes = useStyles();\n   const dispatch = useDispatch();\n\n   const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('this is the post data -->', postData);\n    //simple validator of data entry\n    /*\n    if(postData.creator === '' || postData.title === '' || postData.message === '') {\n      return alert('Creator, title and message fields are required');\n    }\n    */\n    const { name, value } = e.target;\n    let errors = this.state.errors;\n\n    switch (name) {\n      case 'creator': \n        errors.creator = \n          value.length < 0\n            ? 'Creator is required'\n            : '';\n        break;\n        case 'title': \n        errors.title = \n          value.length < 0\n            ? 'Title is required'\n            : '';\n        break;\n        case 'message': \n        errors.message = \n          value.length < 0\n            ? 'Message is required'\n            : '';\n        break;\n        /*\n      case 'email': \n        errors.email = \n          validEmailRegex.test(value)\n            ? ''\n            : 'Email is not valid!';\n        break;\n      case 'password': \n        errors.password = \n          value.length < 8\n            ? 'Password must be at least 8 characters long!'\n            : '';\n        break;\n        */\n      default:\n        break;\n    }\n    this.setState({errors, [name]: value});\n    dispatch(createPost(postData))\n   }\n\n   const clear = () => {\n    setPostData({\n      creator: '',\n      title:'',\n      message:'',\n      tags:'',\n      selectedFile: ''\n    });\n   }\n\n   const destroyMemories = () => {\n     var result = window.confirm(\"Are you sure you want to delete all memories?\");\n     if (result){\n       console.log('destroyed all memories');\n       dispatch(deleteAllPosts());\n     }\n   }\n     return (\n      <Paper className={classes.paper}>\n        <form autoComplete='off' noValidate \n        className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n          <Typography variant='h6'>Creating Nostalgia</Typography>\n          <TextField required name=\"creator\" variant=\"outlined\" label=\"Creator\" fullWidth\n          value={postData.creator}\n          onChange={(e) => setPostData({...postData, creator: e.target.value })}/>\n          <TextField required name=\"title\" variant=\"outlined\" label=\"title\" fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({...postData, title: e.target.value })}/>\n          <TextField required name=\"message\" variant=\"outlined\" label=\"message\" fullWidth\n          value={postData.message}\n          onChange={(e) => setPostData({...postData, message: e.target.value })}/>\n          <TextField name=\"tags\" variant=\"outlined\" label=\"tags\" fullWidth\n          value={postData.tags}\n          onChange={(e) => setPostData({...postData, tags: e.target.value.split(',') })}/>\n          <div className={classes.fileInput}>\n            <FileBase type='file' multiple={false} \n            onDone={({base64}) => setPostData({...postData, selectedFile: base64})}>\n            </FileBase>\n          </div>\n          <Button className={classes.buttonSubmit} variant='contained' color='primary' size='large' type='submit' fullWidth>\n            Submit\n          </Button>\n          <Button className={classes.clearButton} variant='contained' color='secondary' size='small' onClick={clear} fullWidth>\n            clear\n          </Button>\n          <Button variant='contained' color='default' size='large' onClick={destroyMemories} fullWidth>\n            DESTROY MEMORIES\n          </Button>\n        </form>\n      </Paper>\n    )\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}